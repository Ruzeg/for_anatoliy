#include<iostream>
#include<string>
#include<assert.h>
#include<sstream>
#include<vector>
#include<map>
#include<conio.h>
#include<locale.h>
#include<fstream>
#include <algorithm>

using namespace std;

void get_graph (int stat, bool oriented, bool weighted,
					map <string, map <string, int>> &graph, map <string, bool> &existing_points)
{
	system("cls");

	if (stat == 1)
	{
		char path[100];
		cout << "??????? ???? ? ?????: ";
		cin.get(path, 100);
		freopen(path, "r", stdin); //?????????????? ????? ?????
	}

	else //???? ???? ?? ?? ?????, ???? ?????? ?????
	{
		cout << "??????? ???? ? ????????? ???????: ??????? ?????????_???????";
		if (weighted)
			cout << " ???";
		cout << " [Enter]" << endl;
		cout << "?????? ?????? - ??????? ????????? ?????" << endl;
	}

	string point, connected_point; //??????? ? ???????? ? ??? ???????
	string str; //?????? ??? ?????????? ? ?????

	str.clear();
	getline(cin, str);

	while (str.length()!=0) //???? ?? ????????? ?????? ??????
	{
		stringstream str_str;

		point.clear();
		str_str.clear();

		str_str << str; //??????? ????????? ?????, 
		str_str >> point; //?? ???????? ????? ???????? ???????? ? point ???????

		while (str_str.tellp() != EOF) //?????????? ?????????? ???? ????? ?? ??????
		{
			connected_point.clear();
			str_str >> connected_point;

			if (weighted)
				str_str >> graph[point][connected_point];
			else
				graph[point][connected_point] = 1;

			if (!oriented)														//??? ????????????????? ????? ???????
				graph[connected_point][point] = graph[point][connected_point]; //???????? ????

			existing_points[point] = false;
			existing_points[connected_point] = false;
		}
		str.clear();
		getline(cin, str); //?????? ???????? ?????? ??? ??????
	}
}

void find_way(map<string, map <string, int>> &graph, map<string, bool> points_visited,
	vector<pair<int, vector <string>>> &ways, pair <int, vector<string>> current_way, 
	string _begin, string &_end)
{
	current_way.second.push_back(_begin);

	for(auto it : graph[_begin])	//??????? ?????????? ?????? ??? ??????? ???????
	{
		if (!points_visited[it.first]) //???? ????? ?? ???? ???????? ??? ??????? ??????
		{
			if (it.first == _end)     // ? ???????? ????????, ?? ?? ????????? ??????? ???? ? ????? ??????
				ways.push_back(current_way);	
			else                  //???? ?? ???????? ????????
			{
				points_visited[_begin] = true;	//?? ?? ???????? ?? ??????????
				find_way(graph, points_visited, ways, current_way, it.first, _end);	//? ????????? ????? ????? 
			}																		//? ??????? ?????
		}
	}
}

int main()
{
	setlocale(LC_ALL, "Russian");
	int enter, oriented, weighted; //????????? ?????

	do
	{
		cout << "???????? ?????? ????? ?????:" << endl; //??? ??????? ?? ??????????
		cout << "0 - ? ??????????\n1 - ?? ?????" << endl;//????????? ???? ?? ??? ???
		enter = _getch();								//???? ???????????? ?? ??????
		system("cls");									//?????????? ????????
	}while(enter != '0' && enter != '1');

	do
	{
		cout << "???? ???????????????:" << endl;
		cout << "0 - ???\n1 - ??" << endl;
		oriented = _getch();
		system("cls");
	}while(oriented != '0' && oriented != '1');

	do
	{
		cout << "???? ??????????:" << endl;
		cout << "0 - ???\n1 - ??" << endl;
		weighted = _getch();
		system("cls");
	}while(weighted != '0' && weighted != '1');

	map <string, map <string, int>> graph; //???? ??????? ?? ??????, ??????????? ??? ??????? ? ???????? ?????, 
	//? ????????? ? ???????? ????????. ????????? ??????? ?? ??? ??????? - ???
	map <string, bool> points_visited; //??????? ???????????? ??? ???????? ????????????? ?????,
									   // ????? ??? ??????? ?????????? ??????
	get_graph(enter - '0', oriented=='1', weighted=='1', graph, points_visited); //???????? ????

	string start_point, finish_point;

	do
	{
		if (stat == 0) cout << "??????? ????????? ???????: "; //????????? ????? ????? ????????? ? ???????? ?????
		cin >> start_point;									//???? ?? ????? ??????? ???????????? ???????
	} while (points_visited.count(start_point)==0);


	do
	{
		if(stat == 0) cout << "??????? ???????? ???????: ";
		cin >> finish_point;
	} while (points_visited.count(finish_point)==0);

	vector<pair<int, vector<string>>> tree;
	pair<int, vector<string>> current_way;

	current_way.first = 0;
	points_visited[""] = true; //"????????" ???? ?? ?????? ? ?????? ????? ? ????????

	find_way(graph, points_visited, tree, current_way, start_point, finish_point); //??????? ????

	for (int i = 0; i < tree.size(); i++) //??????? ??? ??????? ?? ?????
	{
		tree[i].second.push_back(finish_point);
		for (int j = 0; j < tree[i].second.size() - 1; j++)
			tree[i].first += graph[tree[i].second[j]][tree[i].second[j + 1]];
	}

	sort(tree.begin(), tree.end());

	cout << "????? ?????: " << tree.size() << endl; //??????? ?????????? ?????, ? ????? ??????????? ? ????? ???????

	cout << "????? ???????? ????: ";
	cout << "??? ????: " << tree[0].first << "	????:";
	for (auto j : tree[0].second)
	{
		cout << j << " ";
	}
	cout << endl;

	cout << "????? ??????? ????: ";
	cout << "??? ????: " << tree[tree.size()-1].first << "  ????:";
	for (auto j : tree[tree.size()-1].second)
	{
		cout << j << " ";
	}
	cout << endl;

	for (auto i : tree)
	{
		cout << "??? ????: " << i.first << "  ????:";	//??????? ?????? ?? ?????
		for (auto j : i.second)
		{
			cout << j << " ";
		}
		cout << endl;
	}

	system("pause");
	_sleep(500000);

